m <- [1,2,3]
m <- (1:6, nrow=2,ncol=3)
m <- (1:6 nrow=2,ncol=3)
m <- (1:6, nrow=2, ncol=3)
m <- matrix(1:6, nrow=2, ncol=3)
m
m <- matrix(1,2,3; 4,5,6)
m <- matrix(1,2,3, 4,5,6)
m <- matrix(1,2,3, 4,5)
m <- matrix(1,2,3,4,5)
m <- matrix(1,2,3,4,5,6)
m <- matrix(1:6, ncol=3, nrow=2)
m
x <- c(1, 2, 3, NA, NA, 1)
is.na(x)
R.version.string
install.packages("swirl")
install.packages("testthat")
install.packages("swirl", dependencies = TRUE)
install.packages("evaluate")
library("swirl")
install.packages("testthat")
install.packages("swirl", dependencies = TRUE)
install.packages("swirl", dependencies = TRUE)
library("swirl")
swirl()
x <- 4
class(x)
x <- c(4, "b", TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
x <- c(3,5,1,10,12,6)
x[x<6] <-0
x
read.csv("/mnt/14A38130499E5DE9/Data Science/R Programming/Week 1/hw1_data.csv")
x <- read.csv("/mnt/14A38130499E5DE9/Data Science/R Programming/Week 1/hw1_data.csv")
is.nan(x(1,:))
y <- x[1]
y
is.na(x[1])
which(is.na(x[1]))
length(which(is.na(x[1]))
egw
length(which(is.na(x[1])))
y
mean(y,na.rm=TRUE)
mean(y, na.rm=TRUE)
mean(y, na.rm = TRUE)
mean(x[1], na.rm = TRUE)
mean(x[1], na.rm=TRUE)
x
mean(x[1], na.rm=TRUE)
mean(x[1], na.rm=TRUE))
mean(x[1], na.rm=TRUE)
mean(x[,1], na.rm=TRUE)
x
x[x>31]<-a[,1]
a<-[]
a <- numeric(0)
x[x>31]<-a[,1]
x[x>31]<-a[1,]
a <- subset(x, Ozone>31 & Temp>90)
x
mean(a[,2], na.rm=TRUE)
a <- subset(x, Month=6)
mean(a[,4], na.rm=TRUE)
a
a <- subset(x, Month=6)
a
a <- subset(x, Ozone>31 & Temp>90)
a
b <- subset(x, Month=6)
b
b <- subset(x, Month=<6)
b <- subset(x, Month<=6)
b
b <- subset(x, Month = 6)
b
b <- subset(x, Month == 6)
b
mean(b[,4], na.rm=TRUE)
b <- subset(x, Month == 5)
max(x[,1])
max(x[,1] na.rm=TRUE)
max(x[1] na.rm=TRUE)
max(b[,1] na.rm=TRUE)
max(b[,1], na.rm=TRUE)
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if (x < 5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?!isnull
n <- function(N, P, cv){
pval <- (1.16667-P)/P
num <- N*pval
denum <- (N*cv) + pval
n <- num/denum
print(n)
}
n(250,1, 0.05)
n(250,0.10, 0.05)
n(250,1, 0.01)
n(250,1, 0.1)
n(3000,0.05, 0.1)
n(3000,0.05, 0.10)
n <- function(N, P, cv){
pval <- (1.16667-P)/P
num <- N*pval
denum <- (N*cv^2) + pval
n <- num/denum
print(n)
}
n(3000,0.05, 0.10)
n(250,1, 0.05)
sampleest <- function(N, P, cv){
pval <- (1.16667-P)/P
num <- N*pval
denum <- (N*cv^2) + pval
n <- num/denum
print(n)
}
n(250,1, 0.10)
n(250,1, 0.08)
n(250,1, 0.06)
n(250,1, 0.07)
sampleest <- function(N, P, cv){
sampleest <- function(N, P, cv){
pval <- (1.16667-P)/P
num <- N*pval
denum <- (N*cv^2) + pval
n <- num/denum
print(n)
}
K
DSAGD
}
sampleest <- function(N, P, cv){
pval <- (1.16667-P)/P
num <- N*pval
denum <- (N*cv^2) + pval
n <- num/denum
print(n)
}
sampleest(208)
sampleest(208, 1, 0.05)
sampleest(250, 1, 0.05)
swirl()
source("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
a == b
==
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 > 7
6 < 7
10 <= 10
5 != 7
5 !False 7
5 != 7
5 !== 7
5 == 7 !FALSE
5 == 7 !
5 == 7!
!5 == 7
FALSE & FALSe
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSe))
TRUE & c(TRUE, FALSE, FALSE))
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
x <- ints > 5
which(ints > 5)
which(ints > 7)
any(ints)
any(ints < 0)
all(ints > 0)
library(datasets)
data(iris)
iris
sapply(split)
sapply(split(iris$Sepal.Length, iris$Species), mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
k <- sapply(split(mtcars$hp, mtcars$cyl), mean)
k[[3]] - k[[1]]
x <- runif(9, 1, 36)
x
x <- sample(1:36, 9)
x
x <- sample(1:23, 6)
x
x <- matrix(c(1:9), 3, 3)
x
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
rm(list = ls())
set.seed(1)
?sample()
sample(1:27, 6)
save.image("/mnt/14A38130499E5DE9/Link to Year 2015-16/samples.RData")
set.seed(25)
x <- sample(1:58, 14)
x
save.image("/mnt/14A38130499E5DE9/Link to Year 2015-16/samples2.RData")
rm(list = ls())
set.seed(34)
sample(1:42,10)
save.image("/mnt/14A38130499E5DE9/Link to Year 2015-16/samples4.RData")
14/25
19/25
install.packages(RMySQL)
install.packages("RMySQL")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
rm(list = ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "e76e79755e89891c11ad",
secret = "963a17b58cd4ceac420558df940c0e156c336cfc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("http://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
myapp
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache = FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
rm(list = ls())
library(httr)
install.packages("tidyr")
library(tidyr)
library(swirl)
swirl()
0
swirl()
library(tidyr)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- dbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id:size)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb /2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, value)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
students2 %>% gather(sex_class, count, -grade) %>% separate(sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status, "passed")
mutate(passed, status, passed)
mutate(passed, "status", passed)
?mutate
mutate(passed, status)
mutate(passed, "status")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
passed
bind_rows(passed, failed)
sat
?contains
?select
?separate
submit()
submit()
?group_by
submit()
?group_by
submit()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("myfd")
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
?summarize
summarize(cran, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
submit()
reset()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
# Don't change any of the code below. Just type submit()
# when you think you understand it.
# We've already done this part, but we're repeating it
# here for clarity.
by_package <- group_by(cran, package)
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
# Here's the new bit, but using the same approach we've
# been using this whole time.
top_countries <- filter(pack_sum, countries > 60)
result1 <- arrange(top_countries, desc(countries), avg_bytes)
# Print the results to the console.
print(result1)
submit()
submit()
submit()
View(result3)
submit()
?mutate
submit()
submit()
submit()
colors()
colorspaces
sessionInfo()
set.seed
rm(list = ls())
setwd("/mnt/14A38130499E5DE9/Data Science/Reproducible research/Week 2/RepData_PeerAssessment1")
install.packages("contrib")
install.packages("knitr")
install.packages("evaluate")
install.packages("highr")
install.packages("knitr")
install.packages("knitr")
install.packages("formatR")
install.packages("formatR")
install.packages("markdown")
install.packages("htmltools")
install.packages("htmltools")
install.packages("caTools")
install.packages("caTools")
install.packages("rmarkdown")
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
datevar <- as.Date(activity$date)
rm(list = "datevar")
activity$date <- as.Date(activity$date)
sapply(activity$steps, activity$date, sum)
sapply(activity$steps, sum, activity$date)
sapply(split(activity$steps, activity$date), sum)
activity2 <- na.omit(activity)
sapply(split(activity2$steps, activity2$date), sum)
hist(sapply(split(activity$steps, activity$date), sum))
dev.off()
hist(sapply(split(activity$steps, activity$date), sum), xlab = "Number of steps in a day", ylab = "Frequency (Number of days)")
dev.off()
hist(sapply(split(activity$steps, activity$date), sum), xlab = "Number of steps in a day", ylab = "Frequency (Number of days)", col = "black")
dev.off()
hist(sapply(split(activity$steps, activity$date), sum), xlab = "Number of steps in a day", ylab = "Frequency (Number of days)")
